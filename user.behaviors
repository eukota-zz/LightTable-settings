;; User behaviors
;; -----------------------------
;; Behaviors are stored as a set of diffs that are merged together
;; to create the final set of functionality that makes up Light Table. You can
;; modify these diffs to either add or subtract functionality.
;;
;; Behaviors are added to tags, objects with those tags then automatically gain
;; whatever logic the behavior imparts. To see a list of user-level behaviors,
;; start typing a word related to the functionality you want in between the square
;; brackets (e.g. "theme").



{:+ {

     ;; The app tag is kind of like global scope. You assign behaviors that affect
     ;; all of Light Table here
     :app [(:lt.objs.style/set-skin "dark")
           (:lt.objs.console/set-console-limit 5000)]

     ;; The editor tag is applied to all editors
     :editor [:lt.objs.editor/no-wrap
              (:lt.objs.style/set-theme "default")]

     ;; Here we can add behaviors to just clojure editors
     :editor.clojure [(:lt.objs.langs.clj/print-length 1000)]


     ;; Groovy editor specifics
     :editor.groovy [(:lt.objs.editor/tab-settings false 4 4)
                     (:lt.plugins.groovy/client-enable-logging)]

     :editor.javascript [:lt.plugins.jshint/on-save
                         (:lt.plugins.jshint/jshint-options {:strict true})]}

 ;; You can use the subtract key to remove behavior that may get added by
 ;; another diff
 :- {:app [:lt.objs.intro/show-intro]

     ;; No more "Do you want to save.." on closing editor not backed by a file"
     :editor.transient [:lt.objs.editor.file/dirty-on-change]}
 }
